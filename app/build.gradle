apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "wavetech.facelocker"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    configurations.all{
      resolutionStrategy.force group:'org.opencv.android', name:'opencv', version:'3.4.3'

      //exclude group: 'org.opencv.android', module: 'library'
    }

}

dependencies {
    implementation fileTree(include: ['*.jar', '*.so'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.kaopiz:kprogresshud:1.2.0'
    //implementation project(':openCVLibrary343')
    implementation files('libs/javacv.jar')
    implementation files('libs/javacpp.jar')
    implementation files('libs/ffmpeg.jar')
    implementation files('libs/opencv.jar')
    implementation files('libs/json-simple-1.1.1.jar')
  /*{
      exclude group: 'org.opencv.android', module: 'library'
    }*/
    implementation 'com.eftimoff:android-patternview:1.0.6@aar'
    implementation 'com.andrognito.patternlockview:patternlockview:1.0.0'
    implementation 'com.github.markushi:circlebutton:1.1'
    implementation 'com.getkeepsafe.taptargetview:taptargetview:1.12.0'
  //configurations.all {exclude group: 'org.opencv.android', module: 'library'}
}


task findDuplicates {
  doLast {
    String findMe = 'javax/annotation/CheckForNull.class'
    configurations.compile.files.each { file ->
      if (file.name.endsWith('.jar')) {
        def classMatches = zipTree(file).matching {
          include findMe
        }.files
        if (!classMatches.empty) {
          println "Found $findMe in $file ${classMatches.size()} time(s)"
        }
      }
    }
  }
}
